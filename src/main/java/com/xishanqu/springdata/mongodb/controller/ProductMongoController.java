package com.xishanqu.springdata.mongodb.controller;import com.xishanqu.springdata.common.base.ResultEntity;import com.xishanqu.springdata.common.constant.CodeConstant;import com.xishanqu.springdata.common.constant.ExceptionConstant;import com.xishanqu.springdata.common.dto.ProductDto;import com.xishanqu.springdata.core.entity.Product;import com.xishanqu.springdata.mongodb.service.ProductMongoService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.util.ObjectUtils;import org.springframework.util.StringUtils;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;/** * @Author BaoNing 2019/4/25 */@RestController@RequestMapping("/api/v1/product")public class ProductMongoController {    @Autowired    private ProductMongoService productMongoService;    /**     * save     * @param product     * @return     */    @PostMapping("/saveProduct")    public ResultEntity saveProduct(@RequestBody Product product){        if (ObjectUtils.isEmpty(product)){            return new ResultEntity(CodeConstant.CODE.ERROR, ExceptionConstant.REQUEST.LACK_REQUEST_PARAM);        }        return new ResultEntity(productMongoService.saveProduct(product));    }    /**     * order     * @param productDto     * @return     */    @PostMapping("/orderProduct")    public ResultEntity orderProduct(@RequestBody ProductDto productDto){        if (StringUtils.isEmpty(productDto.getProductId())){            return new ResultEntity(CodeConstant.CODE.ERROR, ExceptionConstant.REQUEST.LACK_REQUEST_PARAM);        }        return new ResultEntity(productMongoService.orderProduct(productDto));    }    /**     * getProduct     * @param productDto     * @return     */    @PostMapping("/getProduct")    public ResultEntity getProduct(@RequestBody ProductDto productDto){        if (StringUtils.isEmpty(productDto.getProductId())){            return new ResultEntity(CodeConstant.CODE.ERROR, ExceptionConstant.REQUEST.LACK_REQUEST_PARAM);        }        return new ResultEntity(productMongoService.getProductById(productDto));    }    /**     * order product for redis     * @param productDto     * @return     */    @PostMapping("/orderProductForRedis")    public ResultEntity orderProductForRedis(@RequestBody ProductDto productDto){        if (StringUtils.isEmpty(productDto.getProductId())){            return new ResultEntity(CodeConstant.CODE.ERROR, ExceptionConstant.REQUEST.LACK_REQUEST_PARAM);        }        return new ResultEntity(productMongoService.orderProductForRedis(productDto));    }}